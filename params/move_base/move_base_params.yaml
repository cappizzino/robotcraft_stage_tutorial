robot_frame: base_link # the frame of the robot, which will be used to determine its position
map_frame: map # the global frame the robot is controlling in

# Planner
base_global_planner: "global_planner/GlobalPlanner"
# the rate in Hz at which to run the planning loop
planner_frequency: 1.0
# how many times we will recall the planner in an attempt to find a valid plan before giving up
planner_max_retries: 3
# how long the planner will wait in seconds in an attempt to find a valid plan before giving up
planner_patience: 10

# Controller
base_local_planner: "teb_local_planner/TebLocalPlannerROS"
# the rate in Hz at which to run the control loop and send velocity commands to the base
controller_frequency: 5.0
# how many times we will recall the controller in an attempt to find a valid command before giving up
controller_max_retries: 3
# how long the controller will wait in seconds without receiving a valid control before giving up
controller_patience: 10

# Oscillation
oscillation_timeout: 0.0  # how long in seconds to allow for oscillation before executing recovery behaviors
oscillation_distance: 0.2 # how far in meters the robot must move to be considered not to be oscillating 

# Other
recovery_enabled: false # enable the move_base_flex recovery behaviors to attempt to clear out space (for some reason the modern name does not work)
recovery_patience: 15.0 # how much time we allow recovery behaviors to complete before canceling (or stopping if cancel fails).
restore_defaults: false # restore to the original configuration
shutdown_costmaps: false # shutdown the costmaps of the node when move_base_flex is in an inactive state.
shutdown_costmaps_delay: 1.0 # how long in seconds to wait after last action before shutting down the costmaps.

